Vvector <- nv(as.vector(aaf$V), aaf$NewickName)
Wvector <- nv(as.vector(aaf$W), aaf$NewickName)
Yvector <- nv(as.vector(aaf$Y), aaf$NewickName)
caisvector<-nv(as.vector(aaf$CAIS), aaf$NewickName)
vectorlist <- list(Avector, Cvector, Dvector, Evector, Fvector, Gvector, Hvector, Ivector, Kvector, Lvector, Mvector, Nvector, Pvector, Qvector, Rvector, Svector, Tvector, Vvector, Wvector, Yvector, caisvector)
_pic <- aafo[,-1]
pictable <- data.frame(matrix(nrow = 116))
for (i in vectorlist) {
vals <- as.data.frame(pic(i, trimmedtree))
#colnames(vals) <- gsub('vector', '', deparse(substitute(i)))
pictable <- cbind(pictable, vals) }
dim(Avector)
length(Avector)
#pf_namevector<-as.vector(pf_aaf$NewickName)#vector of all the vertebrate species names
#pr_namevector<-as.vector(pr_aaf$NewickName)
#pf_trimmedtree<-keep.tip(tree,pf_namevector)# keeping only the tips with vertebrate species names
#pr_trimmedtree<-keep.tip(tree,pr_namevector)
#pf_phyloorder <- as.list(pf_trimmedtree$tip.label)
#pr_phyloorder <- as.list(pr_trimmedtree$tip.label)
#pf_aafo <- arrange(pf_aaf, match(NewickName, pf_phyloorder))
#pr_aafo <- arrange(pr_aaf, match(NewickName, pr_phyloorder))
#pf_aaf
#pr_aaf
#pf_aafo
#pr_aafo
namevector<-as.vector(aaf$NewickName)#vector of all the vertebrate species names
trimmedtree<-keep.tip(tree,namevector)# keeping only the tips with vertebrate species names
phyloorder <- as.list(trimmedtree$tip.label)
aafo <- arrange(aaf, match(NewickName, phyloorder))
aaf
aafo
Avector <- nv(as.vector(aafo$A), aaf$NewickName)
Cvector <- nv(as.vector(aafo$C), aaf$NewickName)
Dvector <- nv(as.vector(aafo$D), aaf$NewickName)
Evector <- nv(as.vector(aafo$E), aaf$NewickName)
Fvector <- nv(as.vector(aafo$"F"), aaf$NewickName)
Gvector <- nv(as.vector(aafo$G), aaf$NewickName)
Hvector <- nv(as.vector(aafo$H), aaf$NewickName)
Ivector <- nv(as.vector(aafo$I), aaf$NewickName)
Kvector <- nv(as.vector(aafo$K), aaf$NewickName)
Lvector <- nv(as.vector(aafo$L), aaf$NewickName)
Mvector <- nv(as.vector(aafo$M), aaf$NewickName)
Nvector <- nv(as.vector(aafo$N), aaf$NewickName)
Pvector <- nv(as.vector(aafo$P), aaf$NewickName)
Qvector <- nv(as.vector(aafo$Q), aaf$NewickName)
Rvector <- nv(as.vector(aafo$R), aaf$NewickName)
Svector <- nv(as.vector(aafo$S), aaf$NewickName)
Tvector <- nv(as.vector(aafo$"T"), aaf$NewickName)
Vvector <- nv(as.vector(aafo$V), aaf$NewickName)
Wvector <- nv(as.vector(aafo$W), aaf$NewickName)
Yvector <- nv(as.vector(aafo$Y), aaf$NewickName)
caisvector<-nv(as.vector(aafo$CAIS), aaf$NewickName)
vectorlist <- list(Avector, Cvector, Dvector, Evector, Fvector, Gvector, Hvector, Ivector, Kvector, Lvector, Mvector, Nvector, Pvector, Qvector, Rvector, Svector, Tvector, Vvector, Wvector, Yvector, caisvector)
pictable <- data.frame(matrix(nrow = 116))
for (i in vectorlist) {
vals <- as.data.frame(pic(i, trimmedtree))
#colnames(vals) <- gsub('vector', '', deparse(substitute(i)))
pictable <- cbind(pictable, vals) }
#create named vectors
Avector <- nv(as.vector(aafo$A), aafo$NewickName)
Cvector <- nv(as.vector(aafo$C), aafo$NewickName)
Dvector <- nv(as.vector(aafo$D), aafo$NewickName)
Evector <- nv(as.vector(aafo$E), aafo$NewickName)
Fvector <- nv(as.vector(aafo$"F"), aafo$NewickName)
Gvector <- nv(as.vector(aafo$G), aafo$NewickName)
Hvector <- nv(as.vector(aafo$H), aafo$NewickName)
Ivector <- nv(as.vector(aafo$I), aafo$NewickName)
Kvector <- nv(as.vector(aafo$K), aafo$NewickName)
Lvector <- nv(as.vector(aafo$L), aafo$NewickName)
Mvector <- nv(as.vector(aafo$M), aafo$NewickName)
Nvector <- nv(as.vector(aafo$N), aafo$NewickName)
Pvector <- nv(as.vector(aafo$P), aafo$NewickName)
Qvector <- nv(as.vector(aafo$Q), aafo$NewickName)
Rvector <- nv(as.vector(aafo$R), aafo$NewickName)
Svector <- nv(as.vector(aafo$S), aafo$NewickName)
Tvector <- nv(as.vector(aafo$"T"), aafo$NewickName)
Vvector <- nv(as.vector(aafo$V), aafo$NewickName)
Wvector <- nv(as.vector(aafo$W), aafo$NewickName)
Yvector <- nv(as.vector(aafo$Y), aafo$NewickName)
caisvector<-nv(as.vector(aafo$CAIS), aafo$NewickName)
vectorlist <- list(Avector, Cvector, Dvector, Evector, Fvector, Gvector, Hvector, Ivector, Kvector, Lvector, Mvector, Nvector, Pvector, Qvector, Rvector, Svector, Tvector, Vvector, Wvector, Yvector, caisvector)
#aafo_pic <- aafo[,-1]
pictable <- data.frame(matrix(nrow = 116))
for (i in vectorlist) {
vals <- as.data.frame(pic(i, trimmedtree))
#colnames(vals) <- gsub('vector', '', deparse(substitute(i)))
pictable <- cbind(pictable, vals) }
namevector<-as.vector(aaf$NewickName)#vector of all the vertebrate species names
aaf
aafo
aafo2 <- subset(aafo, SpeciesUID in phyloorder)
aafo2 <- subset(aafo, SpeciesUID %in% phyloorder)
aaf
aafo
aafo2
aafo2 <- subset(aafo, NewickName %in% phyloorder)
aaf
aafo
aafo2
phyloorder
aafo2 <- subset(aafo, NewickName %in% as.vector(phyloorder))
aaf
aafo
aafo2
as.vector(phyloorder)
aafo2 <- subset(aafo, NewickName %in% trimmedtree$tip.label)
aaf
aafo
aafo2
aafo2 <- filter(aafo, NewickName %in% trimmedtree$tip.label)
aaf
aafo
aafo2
?subset
aafo$NewickName %in% phyloorder
aafo$CAIS
dim(cais)
dim(species)
?distinct
pf_aaf<-read.csv(file = "AllPfam_AAC.csv", header = T)
pr_aaf<-read.csv(file = "VertebrateAAC_CAIS.csv", header = T)
pr_aaf<-pr_aaf[,2:24]
pr_aaf<-distinct(pr_aaf)
dim(pr_aaf)
subset(aaf, SpeciesUID=15)
subset(aaf, SpeciesUID==15)
subset(aaf, SpeciesUID==20)
subset(aaf, SpeciesUID==35)
#read in amino acid frequencies, both proteome or Pfam
pf_aaf<-read.csv(file = "AllPfam_AAC.csv", header = T)
pr_aaf<-read.csv(file = "VertebrateAAC_CAIS.csv", header = T)
pr_aaf<-pr_aaf[,2:24]
pr_aaf<-distinct(pr_aaf, SpeciesUID)
dim(pr_aaf)
tree<-read.tree(file = "PhylogeneticTree_AllSpecies.nwk.txt")
#read in amino acid frequencies, both proteome or Pfam
pf_aaf<-read.csv(file = "AllPfam_AAC.csv", header = T)
pr_aaf<-read.csv(file = "VertebrateAAC_CAIS.csv", header = T)
pr_aaf<-pr_aaf[,2:24]
pr_aaf<-distinct(pr_aaf, SpeciesUID, .keep_all=T)
cais<-read.csv(file="CAIS_KLD.txt", header=T)
species<-read.csv(file="SpeciesList_11_7_2019.txt",header=T)
dim(pr_aaf)
colnames(cais)[1] <- 'SpeciesUID'
#decide from here on out whether to use Pfam or proteome
aaf <- pr_aaf
#pf_aaf <- merge(pf_aaf, species, by.y="SpeciesUID")
#pf_aaf <- merge(pf_aaf, cais, by.y="SpeciesUID")
#pf_aaf <- subset(pf_aaf, NewickName != "Pantholops_hodgsonii") #remove antelope
#pr_aaf <- merge(pr_aaf, species, by.y="SpeciesUID")
#pr_aaf <- merge(pr_aaf, cais, by.y="SpeciesUID")
#pr_aaf <- subset(pr_aaf, NewickName != "Pantholops_hodgsonii") #remove antelope
aaf <- merge(aaf, species, by.y="SpeciesUID")
aaf <- merge(aaf, cais, by.y="SpeciesUID")
aaf <- subset(aaf, NewickName != "Pantholops_hodgsonii") #remove antelope
```
#pf_namevector<-as.vector(pf_aaf$NewickName)#vector of all the vertebrate species names
#pr_namevector<-as.vector(pr_aaf$NewickName)
#pf_trimmedtree<-keep.tip(tree,pf_namevector)# keeping only the tips with vertebrate species names
#pr_trimmedtree<-keep.tip(tree,pr_namevector)
#pf_phyloorder <- as.list(pf_trimmedtree$tip.label)
#pr_phyloorder <- as.list(pr_trimmedtree$tip.label)
#pf_aafo <- arrange(pf_aaf, match(NewickName, pf_phyloorder))
#pr_aafo <- arrange(pr_aaf, match(NewickName, pr_phyloorder))
#pf_aaf
#pr_aaf
#pf_aafo
#pr_aafo
namevector<-as.vector(aaf$NewickName)#vector of all the vertebrate species names
trimmedtree<-keep.tip(tree,namevector)# keeping only the tips with vertebrate species names
phyloorder <- as.list(trimmedtree$tip.label)
aafo <- arrange(aaf, match(NewickName, phyloorder))
aafo2 <- filter(aafo, NewickName %in% phyloorder)
aaf
aafo
aafo2
#Set up data into vectors for use in PIC, choosing Pfam or
# Intialize dataframe
#AAstart <- which(colnames(pf_aafo) == 'A')
#AAend <- which(colnames(pf_aafo) == 'V')
#pictable <- data.frame(matrix(nrow = 116))
# loop model over all amino acids
#for (aa in 1:ncol(pf_aafo_pic)) {
#  vec <- nv(as.vector(aa), pf_aafo_pic$NewickName)
#  vals <- as.data.frame(pic(vec, trimmedtree))
#  colnames(vals) <- colnames(pf_aafo_pic)[aa]
#  pictable <- cbind(pictable, vals) }
#vec <- nv(as.vector(pf_aafo_pic$A), pf_aafo_pic$NewickName)
#  vals <- as.data.frame(pic(vec, trimmedtree))
#  colnames(vals) <- c("node", colnames(pf_aafo_pic)[pf_aafo_pic$A]
#  colnames(vals) <- colnames(pf_aafo_pic)[aa]
#  pictable <- cbind(pictable, vals)
#pf_aafo_pic <- pf_aafo[,2:23]
#for(i in 1:ncol(pf_aafo_pic)) {       # for-loop over columns
#  pf_aafo_pic[ , i] <- pic(as.vector(pf_aafo_pic[ , i]), trimmedtree)
#}
#picvals <- apply(pf_aafo, 2, function(data) pic(as.vector(data), trimmedtree))
#create named vectors
Avector <- nv(as.vector(aafo$A), aafo$NewickName)
Cvector <- nv(as.vector(aafo$C), aafo$NewickName)
Dvector <- nv(as.vector(aafo$D), aafo$NewickName)
Evector <- nv(as.vector(aafo$E), aafo$NewickName)
Fvector <- nv(as.vector(aafo$"F"), aafo$NewickName)
Gvector <- nv(as.vector(aafo$G), aafo$NewickName)
Hvector <- nv(as.vector(aafo$H), aafo$NewickName)
Ivector <- nv(as.vector(aafo$I), aafo$NewickName)
Kvector <- nv(as.vector(aafo$K), aafo$NewickName)
Lvector <- nv(as.vector(aafo$L), aafo$NewickName)
Mvector <- nv(as.vector(aafo$M), aafo$NewickName)
Nvector <- nv(as.vector(aafo$N), aafo$NewickName)
Pvector <- nv(as.vector(aafo$P), aafo$NewickName)
Qvector <- nv(as.vector(aafo$Q), aafo$NewickName)
Rvector <- nv(as.vector(aafo$R), aafo$NewickName)
Svector <- nv(as.vector(aafo$S), aafo$NewickName)
Tvector <- nv(as.vector(aafo$"T"), aafo$NewickName)
Vvector <- nv(as.vector(aafo$V), aafo$NewickName)
Wvector <- nv(as.vector(aafo$W), aafo$NewickName)
Yvector <- nv(as.vector(aafo$Y), aafo$NewickName)
caisvector<-nv(as.vector(aafo$CAIS), aafo$NewickName)
vectorlist <- list(Avector, Cvector, Dvector, Evector, Fvector, Gvector, Hvector, Ivector, Kvector, Lvector, Mvector, Nvector, Pvector, Qvector, Rvector, Svector, Tvector, Vvector, Wvector, Yvector, caisvector)
#aafo_pic <- aafo[,-1]
pictable <- data.frame(matrix(nrow = 116))
for (i in vectorlist) {
vals <- as.data.frame(pic(i, trimmedtree))
#colnames(vals) <- gsub('vector', '', deparse(substitute(i)))
pictable <- cbind(pictable, vals) }
pictable
pictable <- pictable[,2:22]
names(pictable) <- c("A", "C", "D", "E", "F", "G", "H", "I", "K", "L", "M", "N", "P", "Q", "R", "S", "T", "V", "W", "Y", "cais")
pictable
######################### pic comparisons, note that the -1 forces the comparisons through the origin
#Vertebrate_pic_CAIS_AAC_df <- as.data.frame(do.call(cbind, piclist))
#names(Vertebrate_pic_CAIS_AAC_df) <- c("picA", "picC", "picD", "picE", "picF", "picG", "picH", "picI", "picK", "picL", "picM", "picN", "picP", "picQ", "picR", "picS", "picT", "picV", "picW", "picY")
#Vertebrate_pic_CAIS_AAC_df
lmiPIC<-lm(pictable$K~ pictable$cais)
summary(lmiPIC)
cor.test(pictable$K, pictable$cais, method = 'pearson')
cor.test(pictable$K, pictable$cais, method = 'spearman')
# Intialize dataframe
AAstart <- which(colnames(pictable) == 'A')
AAend <- which(colnames(pictable) == 'Y')
model_estimates <- data.frame(matrix(nrow = 2))
# loop model over all amino acids
for (aa in AAstart:AAend) {
model <- lm(pictable[,aa]~pictable$cais)
model_summary <- summary(model)
model_summary <- as.data.frame(model_summary$coefficients[2,1:2])
colnames(model_summary) <- colnames(pictable)[aa]
model_estimates <- cbind(model_estimates, model_summary) }
model_estimates <- model_estimates[,-1]
rownames(model_estimates) <- c('Estimates','Std.Error')
model_estimates <- as.data.frame(t(model_estimates))
model_estimates
#save values, be sure name matches amino acid frequencies you used
write.csv(model_estimates, 'PICcorrected_Pfam_cais_slopes.csv')
#write.csv(model_estimates, 'PICcorrected_proteome_cais_slopes.csv')
massplot2 <-ggplot(data=lmiPIC, aes(piccais,picK)) + geom_point(size=2) + labs( x = "CAIS [PIC Corrected]", y = "Adult Body Mass\n[PIC Corrected]") + stat_smooth(method = "lm", color="red")
massplot2 <- massplot2+theme(axis.title=element_text(size=28, face ="bold"),title=element_text(size=18, face ="bold"),panel.background = element_rect(fill = "white", colour = "grey50"),panel.grid.major = element_line(colour = "grey90"),panel.grid.minor = element_line(colour = "grey90"))
massplot2<- massplot2 + geom_text(data=lmiPIC, aes(x = -0.0005, y = -0.8, label = "Pearson's R:-0.33\n p-value:0.0065"),size=7, colour = 'black')+ theme(axis.text = element_text(size = 24))
massplot2
write.csv(model_estimates, 'PICcorrected_proteome_cais_slopes.csv')
setwd("C:/Users/hanon/Documents/GitHub/aa_flux/CAIS/")
#read in newick tree
tree<-read.tree(file = "PhylogeneticTree_AllSpecies.nwk.txt")
#read in amino acid frequencies, both proteome or Pfam
pf_aaf<-read.csv(file = "AllPfam_AAC.csv", header = T)
pr_aaf<-read.csv(file = "VertebrateAAC_CAIS.csv", header = T)
pr_aaf<-pr_aaf[,2:24]
pr_aaf<-distinct(pr_aaf, SpeciesUID, .keep_all=T)
cais<-read.csv(file="CAIS_KLD.txt", header=T)
species<-read.csv(file="SpeciesList_11_7_2019.txt",header=T)
colnames(cais)[1] <- 'SpeciesUID'
#decide from here on out whether to use Pfam or proteome
aaf <- pf_aaf
#pf_aaf <- merge(pf_aaf, species, by.y="SpeciesUID")
#pf_aaf <- merge(pf_aaf, cais, by.y="SpeciesUID")
#pf_aaf <- subset(pf_aaf, NewickName != "Pantholops_hodgsonii") #remove antelope
#pr_aaf <- merge(pr_aaf, species, by.y="SpeciesUID")
#pr_aaf <- merge(pr_aaf, cais, by.y="SpeciesUID")
#pr_aaf <- subset(pr_aaf, NewickName != "Pantholops_hodgsonii") #remove antelope
aaf <- merge(aaf, species, by.y="SpeciesUID")
aaf <- merge(aaf, cais, by.y="SpeciesUID")
aaf <- subset(aaf, NewickName != "Pantholops_hodgsonii") #remove antelope
#pf_namevector<-as.vector(pf_aaf$NewickName)#vector of all the vertebrate species names
#pr_namevector<-as.vector(pr_aaf$NewickName)
#pf_trimmedtree<-keep.tip(tree,pf_namevector)# keeping only the tips with vertebrate species names
#pr_trimmedtree<-keep.tip(tree,pr_namevector)
#pf_phyloorder <- as.list(pf_trimmedtree$tip.label)
#pr_phyloorder <- as.list(pr_trimmedtree$tip.label)
#pf_aafo <- arrange(pf_aaf, match(NewickName, pf_phyloorder))
#pr_aafo <- arrange(pr_aaf, match(NewickName, pr_phyloorder))
#pf_aaf
#pr_aaf
#pf_aafo
#pr_aafo
namevector<-as.vector(aaf$NewickName)#vector of all the vertebrate species names
trimmedtree<-keep.tip(tree,namevector)# keeping only the tips with vertebrate species names
phyloorder <- as.list(trimmedtree$tip.label)
aafo <- arrange(aaf, match(NewickName, phyloorder))
aafo2 <- filter(aafo, NewickName %in% phyloorder)
aaf
aafo
aafo2
#Set up data into vectors for use in PIC, choosing Pfam or
# Intialize dataframe
#AAstart <- which(colnames(pf_aafo) == 'A')
#AAend <- which(colnames(pf_aafo) == 'V')
#pictable <- data.frame(matrix(nrow = 116))
# loop model over all amino acids
#for (aa in 1:ncol(pf_aafo_pic)) {
#  vec <- nv(as.vector(aa), pf_aafo_pic$NewickName)
#  vals <- as.data.frame(pic(vec, trimmedtree))
#  colnames(vals) <- colnames(pf_aafo_pic)[aa]
#  pictable <- cbind(pictable, vals) }
#vec <- nv(as.vector(pf_aafo_pic$A), pf_aafo_pic$NewickName)
#  vals <- as.data.frame(pic(vec, trimmedtree))
#  colnames(vals) <- c("node", colnames(pf_aafo_pic)[pf_aafo_pic$A]
#  colnames(vals) <- colnames(pf_aafo_pic)[aa]
#  pictable <- cbind(pictable, vals)
#pf_aafo_pic <- pf_aafo[,2:23]
#for(i in 1:ncol(pf_aafo_pic)) {       # for-loop over columns
#  pf_aafo_pic[ , i] <- pic(as.vector(pf_aafo_pic[ , i]), trimmedtree)
#}
#picvals <- apply(pf_aafo, 2, function(data) pic(as.vector(data), trimmedtree))
#create named vectors
Avector <- nv(as.vector(aafo$A), aafo$NewickName)
Cvector <- nv(as.vector(aafo$C), aafo$NewickName)
Dvector <- nv(as.vector(aafo$D), aafo$NewickName)
Evector <- nv(as.vector(aafo$E), aafo$NewickName)
Fvector <- nv(as.vector(aafo$"F"), aafo$NewickName)
Gvector <- nv(as.vector(aafo$G), aafo$NewickName)
Hvector <- nv(as.vector(aafo$H), aafo$NewickName)
Ivector <- nv(as.vector(aafo$I), aafo$NewickName)
Kvector <- nv(as.vector(aafo$K), aafo$NewickName)
Lvector <- nv(as.vector(aafo$L), aafo$NewickName)
Mvector <- nv(as.vector(aafo$M), aafo$NewickName)
Nvector <- nv(as.vector(aafo$N), aafo$NewickName)
Pvector <- nv(as.vector(aafo$P), aafo$NewickName)
Qvector <- nv(as.vector(aafo$Q), aafo$NewickName)
Rvector <- nv(as.vector(aafo$R), aafo$NewickName)
Svector <- nv(as.vector(aafo$S), aafo$NewickName)
Tvector <- nv(as.vector(aafo$"T"), aafo$NewickName)
Vvector <- nv(as.vector(aafo$V), aafo$NewickName)
Wvector <- nv(as.vector(aafo$W), aafo$NewickName)
Yvector <- nv(as.vector(aafo$Y), aafo$NewickName)
caisvector<-nv(as.vector(aafo$CAIS), aafo$NewickName)
vectorlist <- list(Avector, Cvector, Dvector, Evector, Fvector, Gvector, Hvector, Ivector, Kvector, Lvector, Mvector, Nvector, Pvector, Qvector, Rvector, Svector, Tvector, Vvector, Wvector, Yvector, caisvector)
#aafo_pic <- aafo[,-1]
pictable <- data.frame(matrix(nrow = 116))
for (i in vectorlist) {
vals <- as.data.frame(pic(i, trimmedtree))
#colnames(vals) <- gsub('vector', '', deparse(substitute(i)))
pictable <- cbind(pictable, vals) }
pictable <- pictable[,2:22]
names(pictable) <- c("A", "C", "D", "E", "F", "G", "H", "I", "K", "L", "M", "N", "P", "Q", "R", "S", "T", "V", "W", "Y", "cais")
pictable
######################### pic comparisons, note that the -1 forces the comparisons through the origin
#Vertebrate_pic_CAIS_AAC_df <- as.data.frame(do.call(cbind, piclist))
#names(Vertebrate_pic_CAIS_AAC_df) <- c("picA", "picC", "picD", "picE", "picF", "picG", "picH", "picI", "picK", "picL", "picM", "picN", "picP", "picQ", "picR", "picS", "picT", "picV", "picW", "picY")
#Vertebrate_pic_CAIS_AAC_df
lmiPIC<-lm(pictable$K~ pictable$cais)
summary(lmiPIC)
cor.test(pictable$K, pictable$cais, method = 'pearson')
cor.test(pictable$K, pictable$cais, method = 'spearman')
# Intialize dataframe
AAstart <- which(colnames(pictable) == 'A')
AAend <- which(colnames(pictable) == 'Y')
model_estimates <- data.frame(matrix(nrow = 2))
# loop model over all amino acids
for (aa in AAstart:AAend) {
model <- lm(pictable[,aa]~pictable$cais)
model_summary <- summary(model)
model_summary <- as.data.frame(model_summary$coefficients[2,1:2])
colnames(model_summary) <- colnames(pictable)[aa]
model_estimates <- cbind(model_estimates, model_summary) }
model_estimates <- model_estimates[,-1]
rownames(model_estimates) <- c('Estimates','Std.Error')
model_estimates <- as.data.frame(t(model_estimates))
model_estimates
#save values, be sure name matches amino acid frequencies you used
write.csv(model_estimates, 'PICcorrected_Pfam_cais_slopes.csv')
#write.csv(model_estimates, 'PICcorrected_proteome_cais_slopes.csv')
#massplot2 <-ggplot(data=lmiPIC, aes(piccais,picK)) + geom_point(size=2) + labs( x = "CAIS [PIC Corrected]", y = "Adult Body Mass\n[PIC Corrected]") + stat_smooth(method = "lm", color="red")
#massplot2 <- massplot2+theme(axis.title=element_text(size=28, face ="bold"),title=element_text(size=18, face ="bold"),panel.background = element_rect(fill = "white", colour = "grey50"),panel.grid.major = element_line(colour = "grey90"),panel.grid.minor = element_line(colour = "grey90"))
#massplot2<- massplot2 + geom_text(data=lmiPIC, aes(x = -0.0005, y = -0.8, label = "Pearson's R:-0.33\n p-value:0.0065"),size=7, colour = 'black')+ theme(axis.text = element_text(size = 24))
#massplot2
pkgs_needed = c("Rpdb", "rgl", "Rcpp", "tidyverse", "Biostrings",
"RColorBrewer", "magrittr", "plyr", "reshape2", "ade4", "ggplot2", "rowr", "ggpubr", "backports", "flextable", "svglite", "compositions")
letsinstall = setdiff(pkgs_needed, installed.packages())
if (length(letsinstall) > 0) {
BiocManager::install(setdiff(pkgs_needed, installed.packages()))
}
library("dplyr")
library("ggplot2")
library("ggtext")
library("lmodel2")
library("wCorr")
library("gridExtra")
library("magrittr")
library("svglite")
library("compositions")
#Set your working directory
setwd("C:/Users/hanon/Documents/GitHub/aa_flux/Figures/")
#read in amino acid metrics
metrics <- read.delim(file = "Short_amino_acid_properties_Oct23.csv", header=TRUE, stringsAsFactors=FALSE, sep=",") %>% rename(yps="SlopeAnimal..1496", ops="SlopeAnimal..2101")
metrics
#calculate residuals of fitness effects after accounting for mol volume and disorder propensity
model_resid_LKmarch22 <- lm(metrics$mean_LKmarch22~metrics$Disorder_Propensity + metrics$VolumeA3, weights=(y=(1/(metrics$stderr_LKmarch22))^(2)))
resid_LKmarch22 <- model_resid_LKmarch22$residuals
metrics2 <- cbind(metrics, resid_LKmarch22)
#read in flux data
d <- read.delim(file = "../Flux/all_fluxes.csv", header=TRUE, stringsAsFactors=FALSE, sep=",")
dm <- cbind(d, metrics2[,2:89])
dm
dim(metrics2)
names(metrics2)
#read in amino acid metrics
metrics <- read.delim(file = "Short_amino_acid_properties_Oct23.csv", header=TRUE, stringsAsFactors=FALSE, sep=",") %>% rename(yps="SlopeAnimal..1496", ops="SlopeAnimal..2101")
metrics
#calculate residuals of fitness effects after accounting for mol volume and disorder propensity
model_resid_LKmarch22 <- lm(metrics$mean_LKmarch22~metrics$Disorder_Propensity + metrics$VolumeA3, weights=(y=(1/(metrics$stderr_LKmarch22))^(2)))
resid_LKmarch22 <- model_resid_LKmarch22$residuals
metrics2 <- cbind(metrics, resid_LKmarch22)
#read in flux data
d <- read.delim(file = "../Flux/all_fluxes.csv", header=TRUE, stringsAsFactors=FALSE, sep=",")
dm <- cbind(d, metrics2[,2:93])
dm
#settings that affect all or most Figs
#theme
mytheme <- theme(axis.title=element_text(size=16, face="bold"), axis.text=element_text(size=14), panel.background = element_rect(fill = "white", colour = "grey50"), panel.grid.major = element_line(colour = "grey90"), panel.grid.minor = element_blank(), panel.border = element_rect(color = "grey50", fill=NA), plot.margin = unit(c(0.15, 0.3, 0.1, 0.1), "cm"))
#functions for positioning annotations dynamically with axis range
pos_scale <- 0.05
xpos_hi <- function(x){
xpos = max(x) - pos_scale*diff(range(x))
return(xpos)}
xpos_lo <- function(x){
xpos = min(x) + pos_scale*diff(range(x))
return(xpos)}
ypos_hi <- function(y){
ypos = max(y) - pos_scale*diff(range(y))
return(xpos)}
ypos_lo <- function(y){
ypos = min(y) + pos_scale*diff(range(y))
return(ypos)}
cor.test(dm$residuals_m2,dm$picCAISslopeNEWproteome_Estimates, method='pearson')
cor.test(dm$residuals_m2,dm$picCAISslopeNEWPfam_Estimates, method='pearson')
cor.test(dm$residuals_m2,dm$CAISslopeNEWproteome_Estimates, method='pearson')
Fig4<-ggplot(dm, aes(x=residuals_m2, y=picCAISslopeNEWproteome_Estimates)) +
labs( x = "Species flux", y = "Preferred in \nmore-adapted species") +
geom_segment(aes(x=subset(dm, aa=="K")$residuals_m2,
y=subset(dm, aa=="K")$CAISslopeNEWproteome_Estimates,
xend=subset(dm, aa=="R")$residuals_m2,
yend=subset(dm, aa=="R")$CAISslopeNEWproteome_Estimates), color="grey80", alpha=0.3, size=1.5) +
geom_segment(aes(x=subset(dm, aa=="I")$residuals_m2,
y=subset(dm, aa=="I")$CAISslopeNEWproteome_Estimates,
xend=subset(dm, aa=="V")$residuals_m2,
yend=subset(dm, aa=="V")$CAISslopeNEWproteome_Estimates), color="grey80", alpha=0.3, size=1.5) +
annotate(geom="text", x=xpos_hi(dm$residuals_m2), y=ypos_lo(dm$CAISslopeNEWproteome_Estimates), label=paste("R = ", signif(prrcp$estimate, digits=3), "\n p = ", signif(prrcp$p.value, digits=1)), color="black", size=6) +
geom_pointrange(aes(xmin=residuals_m2-residual_error, xmax=residuals_m2+residual_error)) +
geom_pointrange(aes(ymin=CAISslopeNEWproteome_Estimates-CAISslopeNEWproteome_Std.Error, ymax=CAISslopeNEWproteome_Estimates+CAISslopeNEWproteome_Std.Error)) +
geom_point(size=3) +
geom_text(aes(label=aa),hjust=-0.1, vjust=0, color="blue", size = 6) +
mytheme
prrcs <- cor.test(dm$residuals_m2,dm$CAISslopeNEWproteome_Estimates, method='spearman') #R=0.702, p=0.0008
prrcp <- cor.test(dm$residuals_m2,dm$CAISslopeNEWproteome_Estimates, method='pearson') #R=0.709, p=0.0005
prwrcs <- weightedCorr(dm$residuals_m2,dm$CAISslopeNEWproteome_Estimates, method='spearman', weights=dm$residual_error) #R=0.605
prrcs <- cor.test(dm$residuals_m2,dm$CAISslopeNEWproteome_Estimates, method='spearman') #R=0.702, p=0.0008
prrcp <- cor.test(dm$residuals_m2,dm$CAISslopeNEWproteome_Estimates, method='pearson') #R=0.709, p=0.0005
prwrcs <- weightedCorr(dm$residuals_m2,dm$CAISslopeNEWproteome_Estimates, method='spearman', weights=dm$residual_error) #R=0.605
cprrcs <- cor.test(dm$residuals_m2,dm$clrCAISslopeNEWproteome_Estimates, method='spearman') #R=0.695, p=0.0009
cprrcp <- cor.test(dm$residuals_m2,dm$clrCAISslopeNEWproteome_Estimates, method='pearson') #R=0.700, p=0.0006
cprwrcs <- weightedCorr(dm$residuals_m2,dm$clrCAISslopeNEWproteome_Estimates, method='spearman', weights=dm$residual_error) #R=0.586
pfrcs <- cor.test(dm$residuals_m2,dm$CAISslopeNEWPfam_Estimates, method='spearman') #R=0.704, p=0.0008
pfrcp <- cor.test(dm$residuals_m2,dm$CAISslopeNEWPfam_Estimates, method='pearson') #R=0.678, p=0.001
pfwrcs <- weightedCorr(dm$residuals_m2,dm$CAISslopeNEWPfam_Estimates, method='spearman', weights=dm$residual_error) #R=0.595
cpfrcs <- cor.test(dm$residuals_m2,dm$clrCAISslopeNEWPfam_Estimates, method='spearman') #R=0.728, p=0.0004
cpfrcp <- cor.test(dm$residuals_m2,dm$clrCAISslopeNEWPfam_Estimates, method='pearson') #R=0.686, p=0.0008
cpfwrcs <- weightedCorr(dm$residuals_m2,dm$clrCAISslopeNEWPfam_Estimates, method='spearman', weights=dm$residual_error) #R=0.598
cor.test(dm$Levy_Stickiness,dm$residuals_m2, method='spearman')
cor.test(dm$Mean_RSA,dm$residuals_m2, method='spearman')
cor.test(dm$Polarity,dm$residuals_m2, method='spearman')
cor.test(dm$Hydrophobicity,dm$residuals_m2, method='spearman')
cor.test(dm$TourasseChangeability,dm$residuals_m2, method='spearman')
cor.test(dm$PAM_sub,dm$residuals_m2, method='spearman')
cor.test(dm$BLOSUM_sub,dm$residuals_m2, method='spearman')
cor.test(dm$Mean_TdS_conf,dm$residuals_m2, method='spearman')
cor.test(dm$Absolute_TS,dm$residuals_m2, method='spearman')
cor.test(dm$N1redun,dm$residuals_m2, method='spearman')
cor.test(dm$N2redun,dm$residuals_m2, method='spearman')
cor.test(dm$N3redun,dm$residuals_m2, method='spearman') #R=0.532, p=0.0158
cor.test(dm$num_Codons,dm$residuals_m2, method='spearman') #R=0.484, p=0.0308
cor.test(dm$N3redun,dm$CAISslopeNEWPfam_Estimates, method='spearman') #R=0.640, p=0.002
cor.test(dm$num_Codons,dm$CAISslopeNEWPfam_Estimates, method='spearman') #R=0.613, p=0.004
cor.test(dm$N3redun,dm$CAISslope_proteomeEstimates, method='spearman') #R=0.681, p=0.001
cor.test(dm$num_Codons,dm$CAISslope_proteomeEstimates, method='spearman') #R=0.671, p=0.001
Fig4<-ggplot(dm, aes(x=residuals_m2, y=picCAISslopeNEWproteome_Estimates)) +
labs( x = "Species flux", y = "Preferred in \nmore-adapted species") +
geom_segment(aes(x=subset(dm, aa=="K")$residuals_m2,
y=subset(dm, aa=="K")$CAISslopeNEWproteome_Estimates,
xend=subset(dm, aa=="R")$residuals_m2,
yend=subset(dm, aa=="R")$CAISslopeNEWproteome_Estimates), color="grey80", alpha=0.3, size=1.5) +
geom_segment(aes(x=subset(dm, aa=="I")$residuals_m2,
y=subset(dm, aa=="I")$CAISslopeNEWproteome_Estimates,
xend=subset(dm, aa=="V")$residuals_m2,
yend=subset(dm, aa=="V")$CAISslopeNEWproteome_Estimates), color="grey80", alpha=0.3, size=1.5) +
annotate(geom="text", x=xpos_hi(dm$residuals_m2), y=ypos_lo(dm$CAISslopeNEWproteome_Estimates), label=paste("R = ", signif(prrcp$estimate, digits=3), "\n p = ", signif(prrcp$p.value, digits=1)), color="black", size=6) +
geom_pointrange(aes(xmin=residuals_m2-residual_error, xmax=residuals_m2+residual_error)) +
geom_pointrange(aes(ymin=CAISslopeNEWproteome_Estimates-CAISslopeNEWproteome_Std.Error, ymax=CAISslopeNEWproteome_Estimates+CAISslopeNEWproteome_Std.Error)) +
geom_point(size=3) +
geom_text(aes(label=aa),hjust=-0.1, vjust=0, color="blue", size = 6) +
mytheme
Fig4
